grep("^\\d{5}$",x)
}
isZipCode(04444)
##
isZipCode<-function(x){
grep("^\\d{5}$",x)
}
isZipCode(04444)
##
isZipCode<-function(x){
grep("^\\d{5}$",x)
}
isZipCode(04444)
isZipCode("04444")
isZipCode(14444)
grep("^\\d{5}-d{4}$",32312-3829)
grep("^\\d{5}-\\d{4}$",32312-3829)
gsub("^\\s+|\\s+$",""," regular expression are very powerful ")
gsub("(\\w)(\\w*)","\\U\\1\\L\\2"," regular expression are very powerful ", perl=TRUE)
grep("^\\d{5}-\\d{4}$",32312-3829)
grep("^\\d{5}-\\d{4}$","32312-3829")
grep("^\\d{5}-\\d{4}$","32312-38239")
grep("^\\d{5}-\\d{4}$","32312-3839")
grep("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", 3898-4792-4921-8292)
grep("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", "3898-4792-4921-8292")
grep("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", "3898-4792-4921-292")
grep("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", "3898-4792-492138292")
grep("6011-\\d{4}-\\d{4}-\\d{4}$", "3898-4792-4921-8292")
grep("6011-\\d{4}-\\d{4}-\\d{4}$", "6000-4792-4921-8292")
grep("6011-\\d{4}-\\d{4}-\\d{4}$", "6011-4792-4921-8292")
grep("^\\d{4}-(|""|" ")\\d{4}-\\d{4}-\\d{4}$", "38984792-4921-8292")
grep("^\\d{4}(-|""|" ")\\d{4}-\\d{4}-\\d{4}$", "38984792-4921-8292")
grep("^\\d{4}(-|| )\\d{4}-\\d{4}-\\d{4}$", "38984792-4921-8292")
grep("^\\d{4}(-|| )\\d{4}-\\d{4}-\\d{4}$", "3898 4792-4921-8292")
grep("^\\d{4}(-|| )\\d{4}-\\d{4}-\\d{4}$", "3898+4792-4921-8292")
grep("^\\d{4}(-|| )\\d{4}(-|| )\\d{4}(-|| )\\d{4}$", "3898-479249218292")
grep("6011(-|| )\\d{4}(-|| )\\d{4}(-|| )\\d{4}$", "6011-4792-4921-8292")
grep("6011(-|| )\\d{4}(-|| )\\d{4}(-|| )\\d{4}$", "60114792-4921-8292")
grep("6011(-|| )\\d{4}(-|| )\\d{4}(-|| )\\d{4}$", "6011-4792-4921-8292")
grep("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", "3898-479249218292")
grep("^\\d{4}-\\d{4}-\\d{4}-\\d{4}$", "3898-4792-4921-8292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "3898-4792-4921-8292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "38984792-4921-8292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "3898479249218292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "3898 4792 4921 8292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "3898 47924 921 8292")
isValidCC <- function(x){
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|
(^\\d{4}\\d{4}\\d{4}\\d{4}$)|
(^\\d{4} \\d{4} \\d{4} \\d{4}$)", x)
}
isValidCC(3898 47924 921 8292)
isValidCC("3898 47924 921 8292")
isValidCC("3898 4792 4921 8292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "3898 47924 921 8292")
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", "3898 4792 4921 8292")
isValidCC <- function(x){
grep("(^\\d{4}-\\d{4}-\\d{4}-\\d{4}$)|(^\\d{4}\\d{4}\\d{4}\\d{4}$)|(^\\d{4} \\d{4} \\d{4} \\d{4}$)", x)
}
isValidCC("3898 4792 4921 8292")
isValidCC("3898 4792 49218292")
isValidCC("3898 4792 4921 8292")
isValidCC("3898479249218292")
isValidCC("3898-4792-4921-8292")
isValidCC("3898-4792-49218292")
grep("(6011-\\d{4}-\\d{4}-\\d{4}$)|(6011\\d{4}\\d{4}\\d{4}$)|(6011 \\d{4} \\d{4} \\d{4}$)", "6011-4792-4921-8292")
grep("(6011-\\d{4}-\\d{4}-\\d{4}$)|(6011\\d{4}\\d{4}\\d{4}$)|(6011 \\d{4} \\d{4} \\d{4}$)", "601147924921-8292")
grep("(6011-\\d{4}-\\d{4}-\\d{4}$)|(6011\\d{4}\\d{4}\\d{4}$)|(6011 \\d{4} \\d{4} \\d{4}$)", "6011479249218292")
grep("(6011-\\d{4}-\\d{4}-\\d{4}$)|(6011\\d{4}\\d{4}\\d{4}$)|(6011 \\d{4} \\d{4} \\d{4}$)", "6011 4792 4921 8292")
isValidDiscoverCC <- function(x){
grep("(6011-\\d{4}-\\d{4}-\\d{4}$)|(6011\\d{4}\\d{4}\\d{4}$)|(6011 \\d{4} \\d{4} \\d{4}$)", x)
}
isValidDiscoverCC("6011 4792 4921 8292")
# repeat loop
Interest <- 0.0425
Total <- 1000
Year <- 0
repeat{
Year <- Year + 1
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
if(Total>30000) break
}
cat("After", Year, "years, the total will be", Total,"\n")
# repeat loop
Interest <- 0.0425
Total <- 1000
Year <- 0
repeat{
Year <- Year + 1
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
if(Total>30000) break
Total <- Total +1000
}
cat("After", Year, "years, the total will be", Total,"\n")
# repeat loop
Interest <- 0.0425
Total <- 1000
Year <- 0
repeat{
Year <- Year + 1
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
if(Total>=30000) break
Total <- Total +1000
}
cat("After", Year, "years, the total will be", Total,"\n")
# while loop
Interest <- 0.0425
Total <- 1000
Year <- 0
while(Total<30000){
Year <- Year + 1
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
Total <- Total+1000
}
cat("After", Year, "years, the total will be", Total,"\n")
# repeat loop
Interest <- 0.0425
Total <- 0
Year <- 0
repeat{
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
if(Total>=30000) break
}
cat("After", Year, "years, the total will be", Total,"\n")
# while loop
Interest <- 0.0425
Total <- 0
Year <- 0
while(Total<30000){
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
}
cat("After", Year, "years, the total will be", Total,"\n")
# while loop
Interest <- 0.0425
Total <- 1000
Year <- 0
while(Total<30000){
Year <- Year + 1
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
Total <- Total+1000
}
cat("After", Year, "years, the total will be", Total,"\n")
# repeat loop
Interest <- 0.0425
Total <- 1000
Year <- 0
repeat{
Year <- Year + 1
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
if(Total>=30000) break
Total <- Total+1000
}
cat("After", Year, "years, the total will be", Total,"\n")
# while loop
Interest <- 0.0425
Total <- 0
Year <- 0
while(Total<30000){
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
}
cat("After", Year, "years, the total will be", Total,"\n")
# repeat loop
Interest <- 0.0425
Total <- 0
Year <- 0
repeat{
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
if(Total>=30000) break
}
cat("After", Year, "years, the total will be", Total,"\n")
# while loop
Interest <- 0.0425
Total <- 0
Year <- 0
while(Total<30000){
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
}
cat("After", Year, "years, the total will be", Total,"\n")
Interest <- 0.0425
Total <- 0
Year <- 0
while(Total<30000){
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
cat(Year, Total)
}
Interest <- 0.0425
Total <- 0
Year <- 0
while(Total<30000){
Year <- Year + 1
Total <- Total+1000
for(i in 1:4){
Total <- Total + (Interest/4)*Total
}
cat(Year, Total, "\n")
}
hosp <- read.sas7bdat("/Users/jessicahuang/Desktop/Programming/DataFiles(Ron_Cody's_book)/hosp.sas7bdat")
## Problem 2
library(sas7bdat)
hosp <- read.sas7bdat("/Users/jessicahuang/Desktop/Programming/DataFiles(Ron_Cody's_book)/hosp.sas7bdat")
## Problem 4
hosp$MonthsDec <- as.Date("2007-12-31")-as.Date(hosp$AdmitDate, origin="1960-01-01")
head(as.numeric(hosp$MonthsDec)/30)
head(as.numeric(hosp$MonthsDec)/31)
head(as.numeric(hosp$MonthsDec)/31)
head(as.numeric(hosp$MonthsDec)/30)
head(as.numeric(hosp$MonthsDec)/(365.25/12))
head(round(as.numeric(hosp$MonthsDec)/(365.25/12), 2))
## Problem 2
library(sas7bdat)
hosp <- read.sas7bdat("/Users/jessicahuang/Desktop/Programming/DataFiles(Ron_Cody's_book)/hosp.sas7bdat")
# frequencies for the days of the week (corresponding to the admission dates)
table(weekdays(as.Date(hosp$AdmitDate, origin="1960-01-01")))
# frequencies for the moths of the year (corresponding to the admission dates)
table(months(as.Date(hosp$AdmitDate, origin="1960-01-01")))
# frequencies for the years (corresponding to the admission dates)
table(format(as.Date(hosp$AdmitDate, origin="1960-01-01"), "%Y"))
int2Roman <- function(number){
int <- c(1, 4, 5, 9, 10, 40, 50, 90,
100, 400, 500, 900, 1000)
Roman <- c("I", "IV", "V", "IX", "X", "XL",
"L", "XC", "C", "CD", "D", "CM", "M")
i <- 13
while (number>0){
div = floor(number/int[i])
number = number - floor(number/int[i])*int[i]
while (div>0){
cat(Roman[i])
div = div - 1
}
i = i -1
}
}
int2Roman(9)
int2Roman(1499)
int2Roman(1994)
int2Roman <- function(number){
int <- c(1, 4, 5, 9, 10, 40, 50, 90,
100, 400, 500, 900, 1000)
Roman <- c("I", "IV", "V", "IX", "X", "XL",
"L", "XC", "C", "CD", "D", "CM", "M")
i <- 13
while (number>0){
divide <- floor(number/int[i])
number <- number - floor(number/int[i])*int[i]
while (divide>0){
cat(Roman[i])
divide <- divide - 1
}
i <- i -1
}
}
int2Roman(9)
int2Roman(1499)
int2Roman(1994)
int2Roman <- function(number){
int <- c(1, 4, 5, 9, 10, 40, 50, 90,
100, 400, 500, 900, 1000)
Roman <- c("I", "IV", "V", "IX", "X", "XL",
"L", "XC", "C", "CD", "D", "CM", "M")
i <- 13
while (number>0){
divide <- floor(number/int[i])
number <- mod(number, divide)
while (divide>0){
cat(Roman[i])
divide <- divide - 1
}
i <- i -1
}
}
int2Roman(9)
int2Roman(1499)
int2Roman(1994)
5%%3
int2Roman <- function(number){
int <- c(1, 4, 5, 9, 10, 40, 50, 90,
100, 400, 500, 900, 1000)
Roman <- c("I", "IV", "V", "IX", "X", "XL",
"L", "XC", "C", "CD", "D", "CM", "M")
i <- 13
while (number>0){
divide <- floor(number/int[i])
number <- number%%divide
while (divide>0){
cat(Roman[i])
divide <- divide - 1
}
i <- i -1
}
}
int2Roman(9)
int2Roman(1499)
int2Roman(1994)
int2Roman <- function(number){
int <- c(1, 4, 5, 9, 10, 40, 50, 90,
100, 400, 500, 900, 1000)
Roman <- c("I", "IV", "V", "IX", "X", "XL",
"L", "XC", "C", "CD", "D", "CM", "M")
i <- 13
while (number>0){
divide <- floor(number/int[i])
number <- number - divide*int[i]
while (divide>0){
cat(Roman[i])
divide <- divide - 1
}
i <- i -1
}
}
int2Roman(9)
int2Roman(1499)
int2Roman(1994)
int2Roman <- function(number){
int <- c(1, 4, 5, 9, 10, 40, 50, 90,
100, 400, 500, 900, 1000)
Roman <- c("I", "IV", "V", "IX", "X", "XL",
"L", "XC", "C", "CD", "D", "CM", "M")
i <- 13
while (number>0){
divide <- floor(number/int[i])
number <- number - divide*int[i]
while (divide>0){
cat(Roman[i])
divide <- divide - 1
}
i <- i -1
}
}
int2Roman(9)
int2Roman(1499)
int2Roman(1994)
int2Roman(3)
int2Roman(4)
int2Roman(9)
int2Roman(58)
int2Roman(1994)
library(xlsx)
ADRD <- read.xlsx("/Users/jessicahuang/Desktop/Programming/Data/Accidental_Drug_Related_Deaths_2012-2018.xlsx",
sheetIndex=1, header=TRUE)
?read.xlsx
library(xlsx)
ADRD <- read.xlsx("/Users/jessicahuang/Desktop/Programming/Data/Accidental_Drug_Related_Deaths_2012-2018.xlsx",
sheetName="Accidental_Drug_Related_Deaths_", header=TRUE)
View(ADRD)
table(ADRD$Sex)
View(ADRD)
table(ADRA)
table(ADRD$DescriptionofInjury)
table(ADRD$COD)
table(ADRD$InjuryPlace)
table(ADRD$DescriptionofInjury)
View(test_Scores)
file2019 <- read.fwf("/Users/jessicahuang/Downloads/VS19MORT.DUSMCPUB_r20201216")
file2019 <- read.delim("/Users/jessicahuang/Downloads/VS19MORT.DUSMCPUB_r20201216")
View(file2019)
fileObj = open('/Users/jessicahuang/Downloads/VS19MORT.DUSMCPUB_r20201216', 'r')
?attr
x <- 1:10
attr(x,"dim")
attr(x,"dim") <- c(2, 5)
x
attr(x = )
attr(x)
install.packages("rtf")
library(rtf)
install.packages("gridExtra")
install.packages("RColorBrewer")
install.packages("rbokeh")
install.packages("igraph")
setwd("~/Desktop/Programming/HW/GroupMinProject/raw_data")
?rbind
setwd("~/Desktop/Programming/HW/GroupMinProject/raw_data")
library(xlsx)
source('~/Desktop/Programming/HW/GroupMinProject/datacleaning.R', echo=TRUE)
setwd("~/Desktop/Programming/HW/GroupMinProject/raw_data")
library(xlsx)
library(zoo) # for na.locf()
## import data
for(i in 1995:2019){
if(i < 1999){
assign(paste0("crime",i), read.xlsx(paste0("crime",i,".xlsx"),
sheetIndex=1, header=TRUE))
} else if(i %in% c(2001,2003)) {
assign(paste0("crime",i), read.xlsx(paste0("crime",i,".xls"),
sheetIndex=1, header=TRUE, startRow=5))
} else {
assign(paste0("crime",i), read.xlsx(paste0("crime",i,".xls"),
sheetIndex=1, header=TRUE, startRow=4))
}
}
## generate dataset (rate) by state (1995-2004)
for(i in 1995:2004){
# assign dataset to "crime"
assign("crime", get(paste0("crime", i)))
# create state column (all capital letters) from Area
states <- as.data.frame(ifelse(grepl('([A-Z]|[A-Z][0-9])$',crime$Area), crime$Area, NA))
# fill missing value with previous values
states <- na.locf(states, na.rm=FALSE)
# combine states column and crime data
crime <- cbind(states, crime)
# change column name to state
colnames(crime)[1] <- "State"
# extract rate rows for each state
final <- crime[grepl('(Rate|inhabitants)',crime$Area),]
# assign "final" to a new dataset
assign(paste0("cr",i), final)
}
## remove NA row from 1995-1997
cr1995 <- cr1995[duplicated(cr1995[,1])==TRUE,]
cr1996 <- cr1996[duplicated(cr1996[,1])==TRUE,]
cr1996 <- cr1996[-52,]
cr1997 <- cr1997[duplicated(cr1997[,1])==TRUE,]
## generate rate dataset by state (2005-2019)
for(i in 2005:2019){
# assign dataset to "crime"
assign("crime", get(paste0("crime", i)))
# fill missing value with previous values
crime$State <- na.locf(crime$State, na.rm=FALSE)
# extract rate rows for each state
final <- crime[grepl('(Rate)',crime[,3]),]
# assign "final" to a new dataset
assign(paste0("cr",i), final)
}
## select specific columns and add "Year" column
for(i in 1995:2019){
# assign dataset to "crime"
assign("crime", get(paste0("cr", i)))
# select specific columns
if(i %in% 1995:1998){
crime <- crime[,c(1,6,8:11,7,12:14)]
} else if(i %in% 1999:2002) {
crime <- crime[,c(1,6,8:11,7,13:15)]
} else if(i %in% c(2003,2004)) {
crime <- crime[,c(1,4:12)]
} else if(i %in% c(2005:2012, 2017:2019)) {
crime <- crime[,c(1,5:13)]
} else if(i %in% 2013:2016) {
crime <- crime[,c(1,5:7,9:14)]
}
# add "Year" column
crime$Year <- i
# remove numbers from state names
crime$State <-  gsub('[0-9]+', '', crime$State)
# set row names to NULL
rownames(crime) <- NULL
# set column names
colnames(crime) <- c("State","Violent.crime","Murder.and.nonnegligent.manslaughter"
,"Rape" ,"Robbery" ,"Aggravated.assault" ,"Property.crime"
,"Burglary" ,"Larceny.theft" ,"Motor.vehicle.theft" ,"Year" )
# assign "crime" to a new dataset
assign(paste0("cr",i), crime)
}
## combine data by columns from 1995 to 2019
uscrime <- rbind(cr1995, cr1996, cr1997, cr1998, cr1999,
cr2000, cr2001, cr2002, cr2003, cr2004,
cr2005, cr2006, cr2007, cr2008, cr2009,
cr2010, cr2011, cr2012, cr2013, cr2014,
cr2015, cr2016, cr2017, cr2018, cr2019)
## convert some character variables to numeric variables
uscrime$Violent.crime <- as.numeric(uscrime$Violent.crime)
uscrime$Murder.and.nonnegligent.manslaughter <- as.numeric(uscrime$Murder.and.nonnegligent.manslaughter)
uscrime$Rape <- as.numeric(uscrime$Rape)
uscrime$Robbery <- as.numeric(uscrime$Robbery)
uscrime$Aggravated.assault <- as.numeric(uscrime$Aggravated.assault)
uscrime$Property.crime <- as.numeric(uscrime$Property.crime)
uscrime$Burglary <- as.numeric(uscrime$Burglary)
uscrime$Larceny.theft <- as.numeric(uscrime$Larceny.theft)
uscrime$Motor.vehicle.theft <- as.numeric(uscrime$Motor.vehicle.theft)
test <- uscrime
rm(uscrime)
load("uscrime.rda")
identical("uscrime", test)
View(uscrime)
View(test)
identical(uscrime, test)
